<?xml version="1.0" encoding="utf8" ?>
<rss version="2.0">
<channel>
    <title>Deng的梦呓</title>
    <description>Erlang|开发|生活|感悟</description>
    <link>http://github.com/wudeng</link>

    <!-- auto complete by template replacement -->
    <item>
    <title>敏感词过滤</title>
    <link>http://wudeng.github.io/publish/2018-04-13-wordfilter.html</link>
    <description>
<a href="publish/2018-04-13-wordfilter.html"><h1>敏感词过滤</h1>
</a><ul>
<li><a href="#dfa">DFA</a></li>
<li><a href="#ac自动机">AC自动机</a></li>
<li><a href="#erlang实现ac自动机">Erlang实现AC自动机</a></li>
<li><a href="#binary模块">binary模块</a><ul>
<li><a href="#参考文档">参考文档</a></li>
</ul>
</li>
</ul>
<h2><a name="dfa" class="anchor" href="#dfa"><span class="header-link"></span></a>DFA</h2>
<p>Deterministic Finite Automation 确定有穷自动机。
我理解其实就是一个简单的Trie树，节点带output，对于结束的节点，把对应的字符串写在output里面。
对于字符串中的每个字符，查找Trie树中能否走到有单词结束标记的节点。匹配失败的话需要回退。</p>
<h2><a name="ac自动机" class="anchor" href="#ac自动机"><span class="header-link"></span></a>AC自动机</h2>

        <a href="http://wudeng.github.io/publish/2018-04-13-wordfilter.html">阅读全文 >> </a>
    </description>
    <pubDate>4/13/2018</pubDate>
</item>


<item>
    <title>Erlang时间系统</title>
    <link>http://wudeng.github.io/publish/2018-03-29-erlang-time.html</link>
    <description>
<a href="publish/2018-03-29-erlang-time.html"><h1>Erlang时间系统</h1>
</a><ul>
<li><a href="#基本概念">基本概念</a></li>
<li><a href="#time-warp-mode">Time Warp Mode</a></li>
<li><a href="#time-correction">Time Correction</a></li>
<li><a href="#os-system-time">OS System Time</a></li>
<li><a href="#erlang-system-time">Erlang System Time</a></li>
<li><a href="#使用指南">使用指南</a><ul>
<li><a href="#获取系统时间">获取系统时间</a></li>
<li><a href="#测量时间差">测量时间差</a></li>
<li><a href="#事件的顺序">事件的顺序</a></li>
<li><a href="#唯一名字">唯一名字</a></li>
<li><a href="#随机数种子">随机数种子</a></li>
</ul>
</li>
<li><a href="#参考文档">参考文档</a></li>
</ul>
<p>Erlang系统中有两套时间系统。一个是操作系统时间，一个是虚拟机时间。我们知道，操作系统时间是非常不可靠的，
它依靠ntp跟网络上服服务器同步，也有可能被人为修改。如果依赖操作系统时间，程序可能出现异常的行为。
比如游戏中一个设定是每天0点进行结算，如果结算完一次这时操作系统时间调整回去了，结果又会结算一次。
因此ERTS在操作系统时间的基础之上引入了虚拟机时间。</p>
<p>在Erlang/OTP 18(ERTS 7.0)之前，获取时间的接口主要是两个：</p>
<ul>
<li>erlang:now()返回虚拟机时间</li>
<li>os:timestamp()返回操作系统时间。</li>
</ul>

        <a href="http://wudeng.github.io/publish/2018-03-29-erlang-time.html">阅读全文 >> </a>
    </description>
    <pubDate>3/29/2018</pubDate>
</item>


<item>
    <title>docker on windows7</title>
    <link>http://wudeng.github.io/publish/2018-02-27-docker-on-windows7.html</link>
    <description>
<a href="publish/2018-02-27-docker-on-windows7.html"><h1>docker on windows7</h1>
</a><ul>
<li><a href="#安装virtualbox">安装VirtualBox</a></li>
<li><a href="#docker-machine">docker-machine</a></li>
<li><a href="#文件夹挂载">文件夹挂载</a></li>
<li><a href="#端口映射">端口映射</a><ul>
<li><a href="#配置加速器">配置加速器</a></li>
</ul>
</li>
</ul>
<p>windows 7以前的系统需要通过虚拟机软件运行boot2docker来支持docker,
一般使用VirtualBox来运行boot2docker。boot2docker是一个支持docker的linux环境。</p>
<h2><a name="安装virtualbox" class="anchor" href="#安装virtualbox"><span class="header-link"></span></a>安装VirtualBox</h2>
<p>windows上安装虚拟机需要先开启cpu的虚拟化支持，否则会有报错：</p>

        <a href="http://wudeng.github.io/publish/2018-02-27-docker-on-windows7.html">阅读全文 >> </a>
    </description>
    <pubDate>2/27/2018</pubDate>
</item>


<item>
    <title>kcp源码解析</title>
    <link>http://wudeng.github.io/publish/2018-01-15-kcp.html</link>
    <description>
<a href="publish/2018-01-15-kcp.html"><h1>kcp源码解析</h1>
</a><ul>
<li><a href="#相关变量">相关变量</a></li>
<li><a href="#rto计算retransmission-timeout">RTO计算（Retransmission timeout）</a></li>
<li><a href="#segment头部">Segment头部</a></li>
<li><a href="#api">API</a><ul>
<li><a href="#kcp与底层交互">kcp与底层交互</a></li>
<li><a href="#kcp与应用层交互">kcp与应用层交互</a></li>
</ul>
</li>
<li><a href="#参考文献">参考文献</a></li>
</ul>
<p><a href="https://github.com/skywind3000/kcp">kcp</a>是一个实现了类似tcp的重传、流控、拥塞控制等机制的传输协议，它没有指定传输协议，但是一般情况下都会用udp来传输，
相当于用udp实现的tcp协议。它在不稳定的网络环境中采用更激进的方法来获得比tcp更快的传输速度，代价就是会消耗更多的流量。
跟tcp一样，kcp采用滑动窗口机制来实现流控，通过重传机制保证了可靠性，通过慢启动，拥塞避免，快速重传和快速恢复来实现拥塞控制。</p>
<p>kcp支持两种模式：流模式和消息模式。</p>
<p><img src="./data/2018-01-15-kcp/kcp_stream_mode.png" alt=""></img></p>

        <a href="http://wudeng.github.io/publish/2018-01-15-kcp.html">阅读全文 >> </a>
    </description>
    <pubDate>1/15/2018</pubDate>
</item>


<item>
    <title>技能伤害区域计算</title>
    <link>http://wudeng.github.io/publish/2017-11-23-skill-area.html</link>
    <description>
<a href="publish/2017-11-23-skill-area.html"><h1>技能伤害区域计算</h1>
</a><ul>
<li><a href="#圆形">圆形</a></li>
<li><a href="#扇形">扇形</a></li>
<li><a href="#矩形">矩形</a></li>
<li><a href="#参考文献">参考文献</a></li>
<li><a href="#附扇形的检验程序">附扇形的检验程序</a></li>
</ul>
<p>MMO游戏中经常需要实现各种技能的效果，不同技能拥有不同的伤害区域，
一般情况下，我们需要对周围的目标进行遍历，检查目标是否落在伤害区域内。
一般的伤害预期主要是三种：圆形，扇形，矩形。</p>
<h2><a name="圆形" class="anchor" href="#圆形"><span class="header-link"></span></a>圆形</h2>
<p>圆形伤害区域的计算非常简单，给点圆心C, 半径R, 计算P是否在圆内。
只需要计算P到C的欧式距离|P - C|是否小于R即可。为了节省开方计算，
我们可以直接用平方来比较。</p>

        <a href="http://wudeng.github.io/publish/2017-11-23-skill-area.html">阅读全文 >> </a>
    </description>
    <pubDate>11/23/2017</pubDate>
</item>


<item>
    <title>TCP那些事儿</title>
    <link>http://wudeng.github.io/publish/2017-10-09-tcp.html</link>
    <description>
<a href="publish/2017-10-09-tcp.html"><h1>TCP那些事儿</h1>
</a><ul>
<li><a href="#tcp-header">TCP HEADER</a><ul>
<li><a href="#sack-tcp-selective-acknowledgments">sack （tcp selective acknowledgments）</a></li>
</ul>
</li>
<li><a href="#tcp-状态转移">TCP 状态转移</a></li>
<li><a href="#tcp-流控">TCP 流控</a></li>
<li><a href="#超时重传rtoretransmission-timeout">超时重传RTO（Retransmission timeout）</a></li>
<li><a href="#拥塞控制算法-congestion-control-algorithm">拥塞控制算法 congestion control algorithm</a><ul>
<li><a href="#bbr">BBR</a></li>
</ul>
</li>
<li><a href="#随机早期检测red">随机早期检测RED</a></li>
<li><a href="#针对tcp的攻击">针对TCP的攻击</a></li>
<li><a href="#mtu">MTU</a></li>
<li><a href="#连接迁移">连接迁移</a></li>
<li><a href="#锐速">锐速</a></li>
<li><a href="#tcp参数httpstonydenggithubio20150525linux-tcpip-tuning"></a><a href="https://tonydeng.github.io/2015/05/25/linux-tcpip-tuning/">tcp参数</a></li>
<li><p><a href="#参考文献">参考文献</a></p>
</li>
<li><p>面向连接，一对一，所以基于广播和多播的应用程序不能使用TCP服务。而无连接的UDP则非常适合广播和多播。</p>
</li>
<li>字节流，TCP 字节流，send()写recv()读次数没有固定关系，UDP 数据报，sendto()写recvfrom()读次数相同。</li>
<li>可靠传输。</li>
</ul>
<p>传输层-Segment, 网络层-Packet, 链路层-Frame</p>
<h2><a name="tcp-header" class="anchor" href="#tcp-header"><span class="header-link"></span></a>TCP HEADER</h2>
<p><img src="./data/2017-10-09-tcp/tcp-header.png" alt="tcp-header"></img></p>

        <a href="http://wudeng.github.io/publish/2017-10-09-tcp.html">阅读全文 >> </a>
    </description>
    <pubDate>10/9/2017</pubDate>
</item>


<item>
    <title>ssh key auth</title>
    <link>http://wudeng.github.io/publish/2017-09-30-ssh-key-auth.html</link>
    <description>
<a href="publish/2017-09-30-ssh-key-auth.html"><h1>ssh key auth</h1>
</a><ul>
<li><a href="#server-side">server side</a></li>
<li><a href="#client-side">client side</a></li>
<li><a href="#config">config</a></li>
<li><a href="#more-about-config">more about config</a></li>
<li><a href="#debug">debug</a></li>
<li><a href="#reference">reference</a></li>
</ul>
<p>the work flow:</p>
<ul>
<li>use ssh-keygen to generate a pair of private and public keys.</li>
<li>use ssh-copy-id or scp to copy files across local and remote server</li>
<li>add public key to authorized_keys</li>
<li>use private key to login</li>
</ul>
<p><img src="./data/2017-09-30-ssh-key-auth/ssh-key-auth-flow.png" alt="ssh-key-auth"></img></p>

        <a href="http://wudeng.github.io/publish/2017-09-30-ssh-key-auth.html">阅读全文 >> </a>
    </description>
    <pubDate>9/30/2017</pubDate>
</item>


<item>
    <title>bresemham直线算法</title>
    <link>http://wudeng.github.io/publish/2017-09-25-bresenham.html</link>
    <description>
<a href="publish/2017-09-25-bresenham.html"><h1>bresemham直线算法</h1>
</a><ul>
<li><a href="#推导过程">推导过程</a></li>
<li><a href="#优化">优化</a></li>
<li><a href="#实现">实现</a></li>
<li><a href="#参考文档">参考文档</a></li>
</ul>
<p>布雷森汉姆光栅直线算法，用于计算光栅图中两点间的直线经过的点，因为其简单高效，被广泛使用。
在网格图中，怪物从A点移动到B点，如果允许怪物走对角线，那么最简单的移动方式就是从x，y方向上同时向目标点靠近，
直到其中方向距离为0，接下来从另一个方向上向目标点移动，那么表现上就是先走对角然后走直线。BTW，<code>A*</code>算法中的启发函数h，
在允许对角线移动的网格图中就可以用这种方法计算，称为octile算法，相比曼哈顿距离更精确，比欧氏距离更简单。</p>
<pre><code>h = max(<span class="hljs-name">dx</span>, dy) + (<span class="hljs-name">sqrt2</span> - <span class="hljs-number">1</span>) * min(<span class="hljs-name">dx</span>, dy)
</code></pre>
<p>本文简单介绍了该算法的推导过程，并用Erlang实现了该算法。</p>

        <a href="http://wudeng.github.io/publish/2017-09-25-bresenham.html">阅读全文 >> </a>
    </description>
    <pubDate>9/25/2017</pubDate>
</item>


<item>
    <title>Erlang特殊进程</title>
    <link>http://wudeng.github.io/publish/2017-09-09-special-process.html</link>
    <description>
<a href="publish/2017-09-09-special-process.html"><h1>Erlang特殊进程</h1>
</a><ul>
<li><a href="#为啥自己实现">为啥自己实现</a></li>
<li><a href="#为啥不用普通进程">为啥不用普通进程</a></li>
<li><a href="#如何实现">如何实现</a><ul>
<li><a href="#proclib">proc_lib</a></li>
<li><a href="#sys">sys</a></li>
<li><a href="#异步启动">异步启动</a></li>
<li><a href="#同步启动">同步启动</a></li>
</ul>
</li>
<li><a href="#call">Call</a></li>
<li><a href="#实例">实例</a></li>
<li><a href="#参考文档">参考文档</a></li>
</ul>
<p>特殊进程是通过proc_lib来启动的进程，并实现了system消息处理进程。
包括但不限于常用的gen_server, gen_statem, gen_event等标准Behavior。</p>
<h2><a name="为啥自己实现" class="anchor" href="#为啥自己实现"><span class="header-link"></span></a>为啥自己实现</h2>
<p>虽然Behavior很好很强大，可以满足绝大部分的需求，但是它们也存在缺点，那就是过于通用。为了达到通用的目的，
标准Behavior包含了大量处理边界条件的逻辑，一般情况下不会成为问题，但是当你的进程成为瓶颈的时候，可能需要考虑自己实现一个。
比方说：</p>

        <a href="http://wudeng.github.io/publish/2017-09-09-special-process.html">阅读全文 >> </a>
    </description>
    <pubDate>9/9/2017</pubDate>
</item>


<item>
    <title>Ranch源码分析</title>
    <link>http://wudeng.github.io/publish/2017-09-07-ranch.html</link>
    <description>
<a href="publish/2017-09-07-ranch.html"><h1>Ranch源码分析</h1>
</a><ul>
<li><a href="#ranch">ranch</a></li>
<li><a href="#ranchsup">ranch_sup</a></li>
<li><a href="#ranchserver">ranch_server</a></li>
<li><a href="#ranchlistenersup">ranch_listener_sup</a></li>
<li><a href="#ranchacceptorssup">ranch_acceptors_sup</a></li>
<li><a href="#ranchtransport">ranch_transport</a></li>
<li><a href="#ranchtcp">ranch_tcp</a></li>
<li><a href="#ranchssl">ranch_ssl</a></li>
<li><a href="#ranchacceptor">ranch_acceptor</a></li>
<li><a href="#ranchconnssup">ranch_conns_sup</a></li>
<li><a href="#连接进程ranchprotocol的具体实现">连接进程(ranch_protocol的具体实现)</a></li>
<li><a href="#源码">源码</a></li>
</ul>
<p>Ranch是一个TCP连接管理开源库，从著名的cowboy开源库中剥离出来的。
本文对ranch的重要模块一一进行解读，来品味一下这个优雅小巧而又功能强大的TCP管理库。
本文基于ranch的1.0版本。</p>
<h2><a name="ranch" class="anchor" href="#ranch"><span class="header-link"></span></a>ranch</h2>
<p>提供对外接口。最重要的接口是start_listener和stop_listener。需要指定一个唯一的名字Ref，
socket处理模块以及参数，协议处理回调模块及参数。这个函数会将整个监控树启动起来。
Ref是负责处理这个端口连接的监控树的名字，有了这个名字就可以对这颗监控树执行一些操作，
比方说停止监听端口、设置连接上限等。</p>

        <a href="http://wudeng.github.io/publish/2017-09-07-ranch.html">阅读全文 >> </a>
    </description>
    <pubDate>9/7/2017</pubDate>
</item>


<item>
    <title>Windows自动唤醒问题</title>
    <link>http://wudeng.github.io/publish/2017-09-06-device-wake-up-computer.html</link>
    <description>
<a href="publish/2017-09-06-device-wake-up-computer.html"><h1>Windows自动唤醒问题</h1>
</a><ul>
<li><a href="#参考文档">参考文档</a></li>
</ul>
<p>早上到公司发现电脑是开着的，记得下班的时候是休眠的，为什么自己开了呢。打开事件查看器，发现了问题所在。</p>
<p><img src="./data/2017-09-06-device-wake-up-computer/event_wake_up.png" alt="event_wake_up"></img></p>
<p>电脑只休眠了不到一个小时就自动唤醒了(好像暴露了加班狗的属性)。</p>

        <a href="http://wudeng.github.io/publish/2017-09-06-device-wake-up-computer.html">阅读全文 >> </a>
    </description>
    <pubDate>9/6/2017</pubDate>
</item>


<item>
    <title>怪物包围算法</title>
    <link>http://wudeng.github.io/publish/2017-09-01-monster-steering-behavior.html</link>
    <description>
<a href="publish/2017-09-01-monster-steering-behavior.html"><h1>怪物包围算法</h1>
</a><ul>
<li><a href="#算法思路">算法思路</a></li>
<li><a href="#具体实现">具体实现</a></li>
<li><a href="#效果图">效果图</a></li>
<li><a href="#todo">TODO</a></li>
</ul>
<p>ARPG游戏中经常出现多个怪物追着玩家跑的情况，如果怪物始终瞄着玩家的位置移动，那么很容易就出现怪物扎堆的情况。
本文探讨并实现了一个位置管理算法，来解决这个问题。</p>
<h2><a name="算法思路" class="anchor" href="#算法思路"><span class="header-link"></span></a>算法思路</h2>
<p>我们的思路是：如果玩家已经在攻击范围内，直接攻击。否则怪物向玩家移动，形成一个以攻击距离为半径，玩家为圆心的包围圈。
在移动过程中，怪物优先选择怪物所在位置与玩家连线跟圆的交点。 如果交点被占据，则向两边搜索新的位置，直到找到一个位置为止。</p>

        <a href="http://wudeng.github.io/publish/2017-09-01-monster-steering-behavior.html">阅读全文 >> </a>
    </description>
    <pubDate>9/1/2017</pubDate>
</item>


<item>
    <title>Erlang Memory Management</title>
    <link>http://wudeng.github.io/publish/2017-08-26-erlang-memory-management.html</link>
    <description>
<a href="publish/2017-08-26-erlang-memory-management.html"><h1>Erlang Memory Management</h1>
</a><ul>
<li><a href="#概念">概念</a></li>
<li><a href="#各种分配器">各种分配器</a></li>
<li><a href="#分配策略as">分配策略(as)</a></li>
<li><a href="#统计">统计</a></li>
<li><a href="#主要配置参数">主要配置参数</a></li>
<li><a href="#实例">实例</a></li>
<li><a href="#参考文档">参考文档</a></li>
</ul>
<p>系统自带的分配器存在的缺点：</p>
<ul>
<li>小内存分配效率低。</li>
<li>所有数据同样的分配策略，增加碎片。</li>
<li>缺乏跨平台细粒度的统计</li>
<li><code>+Mea</code> disable erts allocators and use malloc for everything</li>
<li>多核内存管理更加重要也更加复杂</li>
</ul>
<h2><a name="概念" class="anchor" href="#概念"><span class="header-link"></span></a>概念</h2>

        <a href="http://wudeng.github.io/publish/2017-08-26-erlang-memory-management.html">阅读全文 >> </a>
    </description>
    <pubDate>8/26/2017</pubDate>
</item>


<item>
    <title>Erlang代码加载模式</title>
    <link>http://wudeng.github.io/publish/2017-07-15-erlang-code-loading.html</link>
    <description>
<a href="publish/2017-07-15-erlang-code-loading.html"><h1>Erlang代码加载模式</h1>
</a><ul>
<li><a href="#purge">purge</a></li>
<li><a href="#热更机制">热更机制</a></li>
<li><a href="#参考文档">参考文档</a></li>
</ul>
<p>Erlang自带三个Boot脚本：</p>
<ul>
<li>start_clean.boot 加载和启动Kernel和STDLIB</li>
<li>start_sasl.boot 比上面多了一个SASL</li>
<li>no_dot_erlang.boot 跟第一个一样，只是不加载<code>.erlang</code>
安装otp的时候可以选择默认脚本是start_clean还是start_sasl，选择以后会拷贝一份start.boot.</li>
</ul>
<p>ERTS中有两种代码加载模式：</p>

        <a href="http://wudeng.github.io/publish/2017-07-15-erlang-code-loading.html">阅读全文 >> </a>
    </description>
    <pubDate>7/15/2017</pubDate>
</item>


<item>
    <title>数据库事务</title>
    <link>http://wudeng.github.io/publish/2017-07-11-database-transaction.html</link>
    <description>
<a href="publish/2017-07-11-database-transaction.html"><h1>数据库事务</h1>
</a><ul>
<li><a href="#隔离级别">隔离级别</a></li>
<li><a href="#2pl-two-phase-locking">2PL: Two-Phase Locking</a></li>
<li><a href="#行锁">行锁</a></li>
<li><a href="#mvcc多版本并发控制">MVCC多版本并发控制</a><ul>
<li><a href="#快照读-snapshot-read">快照读 snapshot read</a></li>
<li><a href="#当前读-current-read">当前读 current read</a></li>
<li><a href="#gap间隙锁">GAP间隙锁</a></li>
</ul>
</li>
<li><a href="#serializable">Serializable</a></li>
<li><a href="#死锁">死锁</a></li>
<li><a href="#参考文档">参考文档</a></li>
</ul>
<p>事务需要满足ACID特征。Mysql的innodb引擎支持事务。</p>
<ul>
<li>原子性，Atomicity, 一个事务是不可分割的整体，要么全部成功(committed)，要么全部失败(rolled back)，不存在部分成功。</li>
<li>一致性，Consistency，数据总是从一致性的状态转移到另一个一致性的状态，总是处于有意义的状态。比如转账，A的钱减少，B的钱增加，总和是不变的。</li>
<li>隔离性，Isolation，主要解决多个事务<strong>并发读写</strong>的问题，一个事务未提交，那么它对数据的修改对外是不可见的。</li>
<li>持久性，Durability，一个事务一旦提交，对数据的影响的永久性的，就算断电，系统崩溃也是如此。</li>
</ul>
<p>四个性质最根本的是一致性，其他三个性质都是服务于一致性的。</p>

        <a href="http://wudeng.github.io/publish/2017-07-11-database-transaction.html">阅读全文 >> </a>
    </description>
    <pubDate>7/11/2017</pubDate>
</item>


<item>
    <title>Beam虚拟机</title>
    <link>http://wudeng.github.io/publish/2017-07-05-beam-virtual-machine.html</link>
    <description>
<a href="publish/2017-07-05-beam-virtual-machine.html"><h1>Beam虚拟机</h1>
</a><ul>
<li><a href="#数据区">数据区</a></li>
<li><a href="#数据对象">数据对象</a></li>
<li><a href="#寄存器">寄存器</a></li>
<li><a href="#重要的指令">重要的指令</a></li>
<li><a href="#并发">并发</a></li>
<li><a href="#参考文档">参考文档</a></li>
</ul>
<p>通过-S选项可以将erl源文件编译成汇编文件。</p>
<pre><code>$ erlc -S <span class="hljs-keyword">test</span>.erl
</code></pre>
<p>反编译 </p>

        <a href="http://wudeng.github.io/publish/2017-07-05-beam-virtual-machine.html">阅读全文 >> </a>
    </description>
    <pubDate>7/5/2017</pubDate>
</item>


<item>
    <title>Erlang的Selective Receive机制</title>
    <link>http://wudeng.github.io/publish/2017-06-21-selective-receive.html</link>
    <description>
<a href="publish/2017-06-21-selective-receive.html"><h1>Erlang的Selective Receive机制</h1>
</a><ul>
<li><a href="#selective-receive">Selective Receive</a></li>
<li><a href="#验证">验证</a></li>
<li><a href="#求证">求证</a></li>
<li><a href="#深入源码">深入源码</a></li>
<li><a href="#结论">结论</a></li>
<li><a href="#参考">参考</a></li>
</ul>
<h2><a name="selective-receive" class="anchor" href="#selective-receive"><span class="header-link"></span></a>Selective Receive</h2>
<p>Joe的Programming Erlang中讲到了Selective Receive的时候，提到了一个<code>save queue</code>的概念。</p>
<blockquote>
<pre><code>receive
  P<span class="hljs-function"><span class="hljs-title">attern1</span> [<span class="hljs-keyword">when</span> Guard1] -&gt;</span>
  Expressions1;
  P<span class="hljs-function"><span class="hljs-title">attern2</span> [<span class="hljs-keyword">when</span> Guard2] -&gt;</span>
  Expressions2;
  ...
after
  T<span class="hljs-function"><span class="hljs-title">ime</span> -&gt;</span>
  ExpressionsTimeout
end
</code></pre><ul>
<li>When we enter a receive statement, we start a timer (but only if an after section is present in the expression).</li>
<li>Take the first message in the mailbox and try to match it against Pattern1, Pattern2, and so on. If the match succeeds, the message is removed from the mailbox, and the expressions following the pattern are evaluated.</li>
<li>If none of the patterns in the receive statement matches the first message in the mailbox, then the first message is removed from the mailbox and put into a "<em>save queue</em>." The second message in the mailbox is then tried. This procedure is repeated until a matching message is found or until all the messages in the mailbox have been examined.</li>
<li>If none of the messages in the mailbox matches, then the process is suspended and will be rescheduled for execution the next time a new message is put in the mailbox. Note that when a new message arrives, the messages in the save queue are not rematched; only the new message is matched.</li>
<li>As soon as a message has been matched, then all messages that have been put into the save queue are reentered into the mailbox in the order in which they arrived at the process. If a timer was set, it is cleared.</li>
<li>If the timer elapses when we are waiting for a message, then evaluate the expressions ExpressionsTimeout and put any saved messages back into the mailbox in the order in which they arrived at the process.</li>
</ul>
</blockquote>

        <a href="http://wudeng.github.io/publish/2017-06-21-selective-receive.html">阅读全文 >> </a>
    </description>
    <pubDate>6/21/2017</pubDate>
</item>


<item>
    <title>基于Erlang的行为树实现</title>
    <link>http://wudeng.github.io/publish/2017-06-08-behavior-tree.html</link>
    <description>
<a href="publish/2017-06-08-behavior-tree.html"><h1>基于Erlang的行为树实现</h1>
</a><ul>
<li><a href="#什么是行为树">什么是行为树</a></li>
<li><a href="#为什么使用行为树">为什么使用行为树</a></li>
<li><a href="#组成部分">组成部分</a></li>
<li><a href="#具体实现">具体实现</a></li>
<li><a href="#参考文档">参考文档</a></li>
</ul>
<h2><a name="什么是行为树" class="anchor" href="#什么是行为树"><span class="header-link"></span></a>什么是行为树</h2>
<p>行为树，英文是Behavior Tree，简称BT，是由行为节点组成的树状结构。行为树的每个节点都会返回一个状态，成功，失败，运行，父节点根据子节点的返回值做出相应的决策。
在游戏开发中，行为树主要用来实现怪物AI的行为决策，根据条件以及环境来决定怪物执行什么样的行为，如攻击，逃跑，巡逻，休息等。</p>
<h2><a name="为什么使用行为树" class="anchor" href="#为什么使用行为树"><span class="header-link"></span></a>为什么使用行为树</h2>

        <a href="http://wudeng.github.io/publish/2017-06-08-behavior-tree.html">阅读全文 >> </a>
    </description>
    <pubDate>6/8/2017</pubDate>
</item>


</channel>
</rss>
